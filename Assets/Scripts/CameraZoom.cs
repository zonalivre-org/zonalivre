using System.Collections;
using System.Collections.Generic;
using DG.Tweening;
using UnityEngine;
using UnityEngine.UI;

public class CameraZoom : MonoBehaviour
{
    [Header("Camera Settings")]
    public float baseOrthographicSize = 28f; // Default size for 16:9 aspect ratio
    public float baseCameraY = 45f; // Default height for 16:9 aspect ratio
    public float baseCameraYStartPosition = 80f; // Default starting height for camera
    private float referenceAspect = 16f / 9f;
    private float newCameraHeight;

    [Header("Animation Settings")]
    public float fallDuration = 3f; // Duration of the fall animation
    public Image fadeImage; // Reference to the fade image for UI
    public GameObject fadeCanvas;

    void Start()
    {
        float currentAspect = (float)Screen.width / Screen.height;

        Camera.main.orthographicSize = baseOrthographicSize * (referenceAspect / currentAspect); // Formula generated by Copilot. Thank you, Copilot!

        newCameraHeight = baseCameraY * (referenceAspect / currentAspect);

        Camera.main.transform.position = new Vector3(Camera.main.transform.position.x, newCameraHeight, Camera.main.transform.position.z); // Ensure camera is positioned correctly

        FallAnimation(); // Start the fall animation
    }


    private void FallAnimation()
    {
        // Start the fade out animation
        fadeImage.DOFade(0f, fallDuration).SetEase(Ease.InOutQuad);

        Camera.main.transform.position = new Vector3(Camera.main.transform.position.x, baseCameraYStartPosition, Camera.main.transform.position.z); // Reset camera position to start height

        Camera.main.transform.DOLocalMoveY(newCameraHeight, fallDuration)
            .SetEase(Ease.InOutQuad)
            .OnStart(() => fadeCanvas.SetActive(true))
            .OnComplete(() => fadeCanvas.SetActive(false));
    }
}
